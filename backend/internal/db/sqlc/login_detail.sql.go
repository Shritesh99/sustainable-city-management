// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: login_detail.sql

package db

import (
	"context"
)

const createLoginDetail = `-- name: CreateLoginDetail :one
INSERT INTO login_details (
    role_id,
    user_id,
    email,
    password
) VALUES (
    $1, $2, $3, $4
) RETURNING role_id, user_id, email, password
`

type CreateLoginDetailParams struct {
	RoleID   int32  `json:"role_id"`
	UserID   int32  `json:"user_id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateLoginDetail(ctx context.Context, arg CreateLoginDetailParams) (LoginDetail, error) {
	row := q.db.QueryRowContext(ctx, createLoginDetail,
		arg.RoleID,
		arg.UserID,
		arg.Email,
		arg.Password,
	)
	var i LoginDetail
	err := row.Scan(
		&i.RoleID,
		&i.UserID,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getLoginDetail = `-- name: GetLoginDetail :one
SELECT role_id, user_id, email, password FROM login_details
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetLoginDetail(ctx context.Context, email string) (LoginDetail, error) {
	row := q.db.QueryRowContext(ctx, getLoginDetail, email)
	var i LoginDetail
	err := row.Scan(
		&i.RoleID,
		&i.UserID,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const updateLoginDetail = `-- name: UpdateLoginDetail :one
UPDATE login_details
SET email = $2
WHERE email = $1
RETURNING role_id, user_id, email, password
`

type UpdateLoginDetailParams struct {
	Email   string `json:"email"`
	Email_2 string `json:"email_2"`
}

func (q *Queries) UpdateLoginDetail(ctx context.Context, arg UpdateLoginDetailParams) (LoginDetail, error) {
	row := q.db.QueryRowContext(ctx, updateLoginDetail, arg.Email, arg.Email_2)
	var i LoginDetail
	err := row.Scan(
		&i.RoleID,
		&i.UserID,
		&i.Email,
		&i.Password,
	)
	return i, err
}
