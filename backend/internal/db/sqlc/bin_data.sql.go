// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: bin_data.sql

package db

import (
	"context"
)

const createBinData = `-- name: CreateBinData :one
INSERT INTO bin_data ("id",
                      "latitude",
                      "longitude",
                      "region",
                      "status")
VALUES ($1, $2, $3, $4, $5) RETURNING id, latitude, longitude, region, status
`

type CreateBinDataParams struct {
	ID        string  `json:"id"`
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
	Region    int32   `json:"region"`
	Status    int32   `json:"status"`
}

func (q *Queries) CreateBinData(ctx context.Context, arg CreateBinDataParams) (BinDatum, error) {
	row := q.db.QueryRowContext(ctx, createBinData,
		arg.ID,
		arg.Latitude,
		arg.Longitude,
		arg.Region,
		arg.Status,
	)
	var i BinDatum
	err := row.Scan(
		&i.ID,
		&i.Latitude,
		&i.Longitude,
		&i.Region,
		&i.Status,
	)
	return i, err
}

const getAllBinData = `-- name: GetAllBinData :many
SELECT id, latitude, longitude, region, status
FROM bin_data
`

func (q *Queries) GetAllBinData(ctx context.Context) ([]BinDatum, error) {
	rows, err := q.db.QueryContext(ctx, getAllBinData)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BinDatum
	for rows.Next() {
		var i BinDatum
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longitude,
			&i.Region,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBinDataByRegion = `-- name: GetBinDataByRegion :many
SELECT id, latitude, longitude, region, status
FROM bin_data
WHERE region = $1
`

func (q *Queries) GetBinDataByRegion(ctx context.Context, region int32) ([]BinDatum, error) {
	rows, err := q.db.QueryContext(ctx, getBinDataByRegion, region)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BinDatum
	for rows.Next() {
		var i BinDatum
		if err := rows.Scan(
			&i.ID,
			&i.Latitude,
			&i.Longitude,
			&i.Region,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
