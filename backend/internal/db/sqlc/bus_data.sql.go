// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: bus_data.sql

package db

import (
	"context"
)

const createBusData = `-- name: CreateBusData :one
INSERT INTO bus_data ("vehicle_id",
                      "latitude",
                      "longitude",
                      "route_id",
                      "direction_id")
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT(vehicle_id) DO
UPDATE SET "latitude" = $2,
           "longitude" = $3,
           "route_id" = $4,
           "direction_id" = $5
RETURNING vehicle_id, latitude, longitude, route_id, direction_id
`

type CreateBusDataParams struct {
	VehicleID   string  `json:"vehicle_id"`
	Latitude    float64 `json:"latitude"`
	Longitude   float64 `json:"longitude"`
	RouteID     string  `json:"route_id"`
	DirectionID int32   `json:"direction_id"`
}

func (q *Queries) CreateBusData(ctx context.Context, arg CreateBusDataParams) (BusDatum, error) {
	row := q.db.QueryRowContext(ctx, createBusData,
		arg.VehicleID,
		arg.Latitude,
		arg.Longitude,
		arg.RouteID,
		arg.DirectionID,
	)
	var i BusDatum
	err := row.Scan(
		&i.VehicleID,
		&i.Latitude,
		&i.Longitude,
		&i.RouteID,
		&i.DirectionID,
	)
	return i, err
}

const getBusDataByRouteId = `-- name: GetBusDataByRouteId :many
SELECT vehicle_id, latitude, longitude, route_id, direction_id
FROM bus_data
WHERE route_id = $1
`

func (q *Queries) GetBusDataByRouteId(ctx context.Context, routeID string) ([]BusDatum, error) {
	rows, err := q.db.QueryContext(ctx, getBusDataByRouteId, routeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BusDatum
	for rows.Next() {
		var i BusDatum
		if err := rows.Scan(
			&i.VehicleID,
			&i.Latitude,
			&i.Longitude,
			&i.RouteID,
			&i.DirectionID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
