// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: pedestrian_data.sql

package db

import (
	"context"
	"time"
)

const createPedestrian = `-- name: CreatePedestrian :one
INSERT INTO pedestrian_data (street_name,
                             latitude,
                             longitude,
                             time,
                             amount)
VALUES ($1, $2, $3, $4, $5) RETURNING id, street_name, latitude, longitude, time, amount
`

type CreatePedestrianParams struct {
	StreetName string    `json:"street_name"`
	Latitude   float64   `json:"latitude"`
	Longitude  float64   `json:"longitude"`
	Time       time.Time `json:"time"`
	Amount     int32     `json:"amount"`
}

func (q *Queries) CreatePedestrian(ctx context.Context, arg CreatePedestrianParams) (PedestrianDatum, error) {
	row := q.db.QueryRowContext(ctx, createPedestrian,
		arg.StreetName,
		arg.Latitude,
		arg.Longitude,
		arg.Time,
		arg.Amount,
	)
	var i PedestrianDatum
	err := row.Scan(
		&i.ID,
		&i.StreetName,
		&i.Latitude,
		&i.Longitude,
		&i.Time,
		&i.Amount,
	)
	return i, err
}

const deletePedestrian = `-- name: DeletePedestrian :exec
DELETE
FROM pedestrian_data
WHERE id = $1
`

func (q *Queries) DeletePedestrian(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deletePedestrian, id)
	return err
}

const getFirstPedestrianIdsOfOneDay = `-- name: GetFirstPedestrianIdsOfOneDay :many
SELECT id
FROM pedestrian_data
ORDER BY id ASC
LIMIT 552
`

func (q *Queries) GetFirstPedestrianIdsOfOneDay(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getFirstPedestrianIdsOfOneDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLastPedestrianIdsOfOneDay = `-- name: GetLastPedestrianIdsOfOneDay :many
SELECT id
FROM pedestrian_data
ORDER BY id DESC
LIMIT 552
`

func (q *Queries) GetLastPedestrianIdsOfOneDay(ctx context.Context) ([]int32, error) {
	rows, err := q.db.QueryContext(ctx, getLastPedestrianIdsOfOneDay)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int32
	for rows.Next() {
		var id int32
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPedestrianByCurrentTime = `-- name: GetPedestrianByCurrentTime :many
SELECT id, street_name, latitude, longitude, time, amount
FROM pedestrian_data
WHERE time = $1
`

func (q *Queries) GetPedestrianByCurrentTime(ctx context.Context, time time.Time) ([]PedestrianDatum, error) {
	rows, err := q.db.QueryContext(ctx, getPedestrianByCurrentTime, time)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PedestrianDatum
	for rows.Next() {
		var i PedestrianDatum
		if err := rows.Scan(
			&i.ID,
			&i.StreetName,
			&i.Latitude,
			&i.Longitude,
			&i.Time,
			&i.Amount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
