// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: noise_data.sql

package db

import (
	"context"
)

const createNoiseData = `-- name: CreateNoiseData :one
INSERT INTO noise_data ("monitor_id", "location", "latitude", "longitude", "record_time", "laeq", "current_rating",
                        "daily_avg", "hourly_avg")
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9) RETURNING monitor_id, location, latitude, longitude, record_time, laeq, current_rating, daily_avg, hourly_avg
`

type CreateNoiseDataParams struct {
	MonitorID     int32   `json:"monitor_id"`
	Location      string  `json:"location"`
	Latitude      string  `json:"latitude"`
	Longitude     string  `json:"longitude"`
	RecordTime    string  `json:"record_time"`
	Laeq          float64 `json:"laeq"`
	CurrentRating int32   `json:"current_rating"`
	DailyAvg      float64 `json:"daily_avg"`
	HourlyAvg     float64 `json:"hourly_avg"`
}

func (q *Queries) CreateNoiseData(ctx context.Context, arg CreateNoiseDataParams) (NoiseDatum, error) {
	row := q.db.QueryRowContext(ctx, createNoiseData,
		arg.MonitorID,
		arg.Location,
		arg.Latitude,
		arg.Longitude,
		arg.RecordTime,
		arg.Laeq,
		arg.CurrentRating,
		arg.DailyAvg,
		arg.HourlyAvg,
	)
	var i NoiseDatum
	err := row.Scan(
		&i.MonitorID,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.RecordTime,
		&i.Laeq,
		&i.CurrentRating,
		&i.DailyAvg,
		&i.HourlyAvg,
	)
	return i, err
}

const deleteNoiseData = `-- name: DeleteNoiseData :exec
DELETE
FROM noise_data
WHERE monitor_id = $1
`

func (q *Queries) DeleteNoiseData(ctx context.Context, monitorID int32) error {
	_, err := q.db.ExecContext(ctx, deleteNoiseData, monitorID)
	return err
}

const getNoiseData = `-- name: GetNoiseData :one
SELECT monitor_id, location, latitude, longitude, record_time, laeq, current_rating, daily_avg, hourly_avg
FROM noise_data
WHERE monitor_id = $1
ORDER BY record_time DESC LIMIT 1
`

func (q *Queries) GetNoiseData(ctx context.Context, monitorID int32) (NoiseDatum, error) {
	row := q.db.QueryRowContext(ctx, getNoiseData, monitorID)
	var i NoiseDatum
	err := row.Scan(
		&i.MonitorID,
		&i.Location,
		&i.Latitude,
		&i.Longitude,
		&i.RecordTime,
		&i.Laeq,
		&i.CurrentRating,
		&i.DailyAvg,
		&i.HourlyAvg,
	)
	return i, err
}
