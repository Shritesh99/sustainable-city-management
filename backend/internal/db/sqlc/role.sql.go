// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: role.sql

package db

import (
	"context"
)

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    role_name
) VALUES (
    $1
) RETURNING role_id, role_name
`

func (q *Queries) CreateRole(ctx context.Context, roleName string) (Role, error) {
	row := q.db.QueryRowContext(ctx, createRole, roleName)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE role_id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, roleID int32) error {
	_, err := q.db.ExecContext(ctx, deleteRole, roleID)
	return err
}

const getRole = `-- name: GetRole :one
SELECT role_id, role_name FROM roles
WHERE role_id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, roleID int32) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRole, roleID)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}

const updateRole = `-- name: UpdateRole :one
UPDATE roles
SET role_name = $2
WHERE role_id = $1
RETURNING role_id, role_name
`

type UpdateRoleParams struct {
	RoleID   int32  `json:"role_id"`
	RoleName string `json:"role_name"`
}

func (q *Queries) UpdateRole(ctx context.Context, arg UpdateRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, updateRole, arg.RoleID, arg.RoleName)
	var i Role
	err := row.Scan(&i.RoleID, &i.RoleName)
	return i, err
}
