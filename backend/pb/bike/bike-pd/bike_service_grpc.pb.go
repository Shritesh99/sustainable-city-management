// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: bike_service/bike_service.proto

package bike_pd

import (
	grpc "google.golang.org/grpc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BikeServiceClient is the client API for BikeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BikeServiceClient interface {
}

type bikeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBikeServiceClient(cc grpc.ClientConnInterface) BikeServiceClient {
	return &bikeServiceClient{cc}
}

// BikeServiceServer is the server API for BikeService service.
// All implementations must embed UnimplementedBikeServiceServer
// for forward compatibility
type BikeServiceServer interface {
	mustEmbedUnimplementedBikeServiceServer()
}

// UnimplementedBikeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBikeServiceServer struct {
}

func (UnimplementedBikeServiceServer) mustEmbedUnimplementedBikeServiceServer() {}

// UnsafeBikeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BikeServiceServer will
// result in compilation errors.
type UnsafeBikeServiceServer interface {
	mustEmbedUnimplementedBikeServiceServer()
}

func RegisterBikeServiceServer(s grpc.ServiceRegistrar, srv BikeServiceServer) {
	s.RegisterService(&BikeService_ServiceDesc, srv)
}

// BikeService_ServiceDesc is the grpc.ServiceDesc for BikeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BikeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BikeService",
	HandlerType: (*BikeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams:     []grpc.StreamDesc{},
	Metadata:    "bike_service/bike_service.proto",
}
