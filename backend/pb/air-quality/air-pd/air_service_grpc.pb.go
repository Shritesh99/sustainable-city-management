// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: airquality_service/air_service.proto

package air_pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AirServiceClient is the client API for AirService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AirServiceClient interface {
	GetAirData(ctx context.Context, in *AirIdRequest, opts ...grpc.CallOption) (*JsonStringResponse, error)
	GetAQI(ctx context.Context, in *NilRequest, opts ...grpc.CallOption) (*JsonStringResponse, error)
	GetNoiseData(ctx context.Context, in *NilRequest, opts ...grpc.CallOption) (*JsonStringResponse, error)
}

type airServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAirServiceClient(cc grpc.ClientConnInterface) AirServiceClient {
	return &airServiceClient{cc}
}

func (c *airServiceClient) GetAirData(ctx context.Context, in *AirIdRequest, opts ...grpc.CallOption) (*JsonStringResponse, error) {
	out := new(JsonStringResponse)
	err := c.cc.Invoke(ctx, "/AirService/GetAirData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airServiceClient) GetAQI(ctx context.Context, in *NilRequest, opts ...grpc.CallOption) (*JsonStringResponse, error) {
	out := new(JsonStringResponse)
	err := c.cc.Invoke(ctx, "/AirService/GetAQI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airServiceClient) GetNoiseData(ctx context.Context, in *NilRequest, opts ...grpc.CallOption) (*JsonStringResponse, error) {
	out := new(JsonStringResponse)
	err := c.cc.Invoke(ctx, "/AirService/GetNoiseData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirServiceServer is the server API for AirService service.
// All implementations must embed UnimplementedAirServiceServer
// for forward compatibility
type AirServiceServer interface {
	GetAirData(context.Context, *AirIdRequest) (*JsonStringResponse, error)
	GetAQI(context.Context, *NilRequest) (*JsonStringResponse, error)
	GetNoiseData(context.Context, *NilRequest) (*JsonStringResponse, error)
	mustEmbedUnimplementedAirServiceServer()
}

// UnimplementedAirServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAirServiceServer struct {
}

func (UnimplementedAirServiceServer) GetAirData(context.Context, *AirIdRequest) (*JsonStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirData not implemented")
}
func (UnimplementedAirServiceServer) GetAQI(context.Context, *NilRequest) (*JsonStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAQI not implemented")
}
func (UnimplementedAirServiceServer) GetNoiseData(context.Context, *NilRequest) (*JsonStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNoiseData not implemented")
}
func (UnimplementedAirServiceServer) mustEmbedUnimplementedAirServiceServer() {}

// UnsafeAirServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AirServiceServer will
// result in compilation errors.
type UnsafeAirServiceServer interface {
	mustEmbedUnimplementedAirServiceServer()
}

func RegisterAirServiceServer(s grpc.ServiceRegistrar, srv AirServiceServer) {
	s.RegisterService(&AirService_ServiceDesc, srv)
}

func _AirService_GetAirData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirServiceServer).GetAirData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirService/GetAirData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirServiceServer).GetAirData(ctx, req.(*AirIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirService_GetAQI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirServiceServer).GetAQI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirService/GetAQI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirServiceServer).GetAQI(ctx, req.(*NilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AirService_GetNoiseData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NilRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirServiceServer).GetNoiseData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/AirService/GetNoiseData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirServiceServer).GetNoiseData(ctx, req.(*NilRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AirService_ServiceDesc is the grpc.ServiceDesc for AirService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AirService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AirService",
	HandlerType: (*AirServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAirData",
			Handler:    _AirService_GetAirData_Handler,
		},
		{
			MethodName: "GetAQI",
			Handler:    _AirService_GetAQI_Handler,
		},
		{
			MethodName: "GetNoiseData",
			Handler:    _AirService_GetNoiseData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airquality_service/air_service.proto",
}
